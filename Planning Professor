import tkinter as tk

from tkinter import messagebox
class PlanningProfessor:
    def __init__(self, root):
        self.root = root
        self.root.title("Planning Professor")
        self.root.geometry("500x400")
        self.tasks = []
        self.grocery_items = []
        # Frame for menu
        self.menu_frame = tk.Frame(self.root)
        self.menu_frame.pack(side="top", fill="x")
        # Frame for content
        self.content_frame = tk.Frame(self.root)
        self.content_frame.pack(expand=True, fill="both")
        # Title label
        title_label = tk.Label(self.root, text="Planning Professor", font=("Helvetica", 24))
        title_label.pack(pady=10)
        # Description label
        description_label = tk.Label(self.root, text="Manage your tasks and grocery items efficiently!", font=("Helvetica", 12))
        description_label.pack(pady=5)
        # ToDo List button
        self.to_do_button = tk.Button(self.menu_frame, text="To-Do List", command=self.show_todo_list)
        self.to_do_button.pack(side="left", padx=5, pady=5)
        #grocery List button
        self.grocery_button = tk.Button(self.menu_frame, text="Grocery List", command=self.show_grocery_list)
        self.grocery_button.pack(side="left", padx=5, pady=5)
        # Clear All button
        self.clear_all_button = tk.Button(self.menu_frame, text="Clear All", command=self.clear_all)
        self.clear_all_button.pack(side="left", padx=5, pady=5)
        # Exit button
        self.exit_button = tk.Button(self.menu_frame, text="Exit", command=self.exit_application)
        self.exit_button.pack(side="left", padx=5, pady=5)
        self.show_todo_list() 
    def clear_content(self):
        """Clear all widgets from the content frame."""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    def load_images(self):
        """Load images for the To-Do and Grocery lists."""
        self.image1 = tk.PhotoImage(file=r"C:\Users\gamin\OneDrive\Desktop\todo.png")  
        self.image2 = tk.PhotoImage(file=r"C:\Users\gamin\OneDrive\Desktop\grocery.png")  
    def show_todo_list(self):
        """Display the To-Do List interface."""
        self.clear_content()
        self.load_images() 
        todo_label = tk.Label(self.content_frame, text="To-Do List", font=("Helvetica", 16))
        todo_label.pack(pady=10)
        # Additional label for To-Do List
        todo_description_label = tk.Label(self.content_frame, text="Add and manage your tasks here.", font=("Helvetica", 10))
        todo_description_label.pack(pady=5)
        # Display the To-Do image
        todo_image_label = tk.Label(self.content_frame, image=self.image1, width=100, height=100)  # Set width and height
        todo_image_label.pack(pady=10)
        # Entry for adding tasks
        self.task_entry = tk.Entry(self.content_frame, width=40)
        self.task_entry.pack(pady=5)
        # Button to add tasks
        add_task_button = tk.Button(self.content_frame, text="Add Task", command=self.add_task)
        add_task_button.pack(pady=5)
        # Button to delete tasks
        delete_task_button = tk.Button(self.content_frame, text="Delete Task", command=self.delete_task)
        delete_task_button.pack(pady=5)
        # Listbox to display tasks
        self.task_listbox = tk.Listbox(self.content_frame, height=10, width=50)
        self.task_listbox.pack(pady=10)
        for task in self.tasks:
            self.task_listbox.insert(tk.END, task)
    def show_grocery_list(self):
        """Display the Grocery List interface."""
        self.clear_content()
        self.load_images()  
        grocery_label = tk.Label(self.content_frame, text="Grocery List", font=("Helvetica", 16))
        grocery_label.pack(pady=10)
        # Additional label for Grocery List
        grocery_description_label = tk.Label(self.content_frame, text="Add and manage your grocery items here.", font=("Helvetica", 10))
        grocery_description_label.pack(pady=5)
        # Display the Grocery image
        grocery_image_label = tk.Label(self.content_frame, image=self.image2, width=100, height=100)  # Set width and height
        grocery_image_label.pack(pady=10)
        # Entry for adding grocery items
        self.grocery_entry = tk.Entry(self.content_frame, width=40)
        self.grocery_entry.pack(pady=5)
        # Button to add grocery items
        add_grocery_button = tk.Button(self.content_frame, text="Add Grocery Item", command=self.add_grocery_item)
        add_grocery_button.pack(pady=5)
        # Button to delete grocery items
        delete_grocery_button = tk.Button(self.content_frame, text="Delete Grocery Item", command=self.delete_grocery_item)
        delete_grocery_button.pack(pady=5)
        # Listbox to display grocery items
        self.grocery_listbox = tk.Listbox(self.content_frame, height=10, width=50)
        self.grocery_listbox.pack(pady=10)
        for item in self.grocery_items:
            self.grocery_listbox.insert(tk.END, item)
    def add_task(self):
        """Add a task to the To-Do List."""
        task = self.task_entry.get().strip()
        if not task:
            messagebox.showwarning("Input Error", "Please enter a valid task.")
            return
        self.tasks.append(task)  
        self.task_listbox.insert(tk.END, task)  
        self.task_entry.delete(0, tk.END)  
    def add_grocery_item(self):
        """Add a grocery item to the Grocery List."""
        item = self.grocery_entry.get().strip()  #
        if not item:
            messagebox.showwarning("Input Error", "Please enter a valid grocery item.")
            return
        self.grocery_items.append(item) 
        self.grocery_listbox.insert(tk.END, item)  
        self.grocery_entry.delete(0, tk.END)  
    def delete_task(self):
        """Delete a selected task from the To-Do List."""
        try:
            selected_task_index = self.task_listbox.curselection()[0] 
            self.task_listbox.delete(selected_task_index)  
            del self.tasks[selected_task_index] 
        except IndexError:
            messagebox.showwarning("Selection Error", "Please select a task to delete.")
    def delete_grocery_item(self):
        """Delete a selected grocery item from the Grocery List."""
        try:
            selected_grocery_index = self.grocery_listbox.curselection()[0]  
            self.grocery_listbox.delete(selected_grocery_index)  
            del self.grocery_items[selected_grocery_index]  
        except IndexError:
            messagebox.showwarning("Selection Error", "Please select a grocery item to delete.")
    def clear_all(self):
        """Clear all tasks and grocery items."""
        self.tasks.clear()  
        self.grocery_items.clear()  
        # Clear the task listbox if it exists
        if hasattr(self, 'task_listbox'):
            self.task_listbox.delete(0, tk.END)
        # Clear the grocery listbox if it exists
        if hasattr(self, 'grocery_listbox'):
            self.grocery_listbox.delete(0, tk.END)
        messagebox.showinfo("Clear All", "All tasks and grocery items have been cleared.")
    def exit_application(self):
        """Exit the application."""
        if messagebox.askokcancel("Exit", "Are you sure you want to exit?"):
            self.root.destroy()  # Close the application
if __name__ == "__main__":
    root = tk.Tk()
    app = PlanningProfessor(root)
    root.mainloop()
